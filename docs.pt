import "src/img/point.ico";
import "src/css/main.css";
import "src/css/docs.css";
import "src/js/main.js";
import "src/js/docs.js";
import "https://fonts.googleapis.com/css?family=Roboto" as "stylesheet";

$title = "Point";
$page = "Documentation";

html {
	head {
		title { $title + " | " + $page; }
	}
	body {
		table.banner {
			tr {
				td.icon {
					img { src: "src/img/point.png"; }
				}
				td.title {
					h1 { $title + " â€• " + $page; }
				}
			}
		}
        div.navbar {
            ul {
			    li { a { href: "index.html"; "Home"; } }
			    li { a { href: "about.html"; "About"; } }
			    li { a { href: "news.html"; "News"; } }
			    li { a { href: "get-started.html"; "Get started"; } }
			    li { a { href: "download.html"; "Download"; } }
			    li { a.active { href: "docs.html"; "Documentation"; }	 }
			}
        }
		div.sidebar {
			ul {
				li { a { href: "#syntax"; "Syntax"; } }
				li { a { href: "#constants"; "Constants"; } }
				li { a { href: "#logic"; "Logic"; } }
				li { a { href: "#variables"; "Variables"; } }
				li { a { href: "#comments"; "Comments"; } }
				li { a { href: "#importing"; "Importing"; } }
				li { a { href: "#attaching"; "Attaching"; } }
			}
		}
        div.content {
			h1.center { $page; }
			table {
				tr {
					td.col {
						div#syntax.card {
							h2 { "Syntax"; }
							p {
								"The syntax of Point is very similar to css. Line end indicators are necessary while within elements, like shown.";
							}
							pre.code {
								"a {\n";
								" 'Some text';\n";
								"}\n";
								"\n";
								"button {\n";
								" 'Some other text';\n";
								"}\n";
							}
							p {
								"an element is defined by its name, followed by its classes, id, attributes and content:";
							}
							pre.code {
								"button#mybuttonid.mybuttonclass {\n";
								" onclick: 'button_click_handler()';\n";
								" 'Click me';\n";
								"}\n";
							}
							p {
								"statements are called by their name, their argument and a trailing semicolon:";
							}
							pre.code {
								"attach 'Hello world!'";
							}
						}
						div#constants.card {
							h2 { "Constants"; }
							p { "Constants are values that can be used throughout your code as data"; }
							pre.code {
								"// string\n";
								span { style:"color:yellow"; "'Hello world!'\n"; }
								"// number (this can be negative or decimal aswell)\n";
								span { style:"color:red"; "10\n"; }
								"// boolean\n";
								span { style:"color:purple"; "true\n"; }
								"// null type\n";
								span { style:"color:gray"; "null\n"; }
							}
						}
						div#logic.card {
							h2 { "Logic"; }
							p {
								"The supported operators of this language are < > - + / * = == & |";
								br {}
								"Strings can be modified/compared with == != +, numbers with < > - + / * and booleans with & |";
							}
						}
						div#variables.card {
							h2 { "Variables"; }
							p { "Variables can be used to access constants multiple times and quickly throughout the code. You can assign to one like this:"; }
							pre.code {
								"$myvar = 'Hi!';";
							}
							p { "And then use it like this:"; }
							pre.code {
								"$myvar";
							}
						}
					}
					td.gutter { }
					td.col {
						div#comments.card {
							h2 { "Comments"; }
							p { "Comments are useful for documenting your code or disabling functionality/lines of your code. Inline comments are written with a double-slash like this:"; }
							pre.code {
								"// This is a comment";
							}
							p { "It is convention to put a space after // to make it more readable and look nicer."; }
						}
						div#importing.card {
							h2 { "Importing"; }
							p { "The import statement allows for quick file linking, based on the file type, the functionality differs. If the specified file is a css file, it will be linked like a stylesheet, this is also suppored for ico files as icons, html files as preloads, js files as script elements. The pt file extension during build, will be transpiled aswell, to the matching directory structure."; }
						}
						div#attaching.card {
							h2 { "Attaching"; }
							p { "The attach statement, during build will read the file's content and wrap it around the transpiled result, to delimit between above and below, use $&"; }
						}
					}
				}
			}
			}

        div.footer {
			p { "Made by Melodi"; }
		}
    }
}